const _ = require('lodash');
const Path = require('path-parser');
const { URL } = require('url');
const mongoose = require('mongoose');
const requireLogin = require('../middlewares/requireLogin');
const requireCredits = require('../middlewares/requireCredits');
const Mailer = require('../services/Mailer');
const surveyTemplate = require('../services/emailTemplates/surveyTemplate');
const Survey = mongoose.model('surveys');

// creating an instance of a survey which requires you to be logged in and have credits available
module.exports = app => {
  // mongo query to pull up all the surveys for one particular user for display on dashboard component
  app.get('/api/surveys', requireLogin, async (req, res) => {
    const surveys = await Survey.find({ _user: req.user.id }).select({
      recipients: false
    });

    res.send(surveys);
  });

  app.get('/api/surveys/:surveyId/:choice', (req, res) => {
    res.send('Thanks for your time and feedback!');
  });

  app.post('/api/surveys/webhooks', (req, res) => {
    const p = new Path('/api/surveys/:surveyId/:choice');
    // this iterates over all the events that sendgrid returns (click, bounce, etc.) emailTemplate.js contains actual link url
    _.chain(req.body)
      .map(({ email, url }) => {
        const extract = p.test(new URL(url).pathname); //extracting the path route off of the url
        if (extract) {
          return {
            email,
            surveyId: extract.surveyId,
            choice: extract.choice
          };
        }
      })
      .compact()
      .uniqBy('email', 'surveyId')
      .each(({ surveyId, email, choice }) => {
        // this is a mongo query
        // find the Survey collection, find and update one record in the collection
        // find the survey with the given id, matching a recipient with a given email
        // and who has not responded to the survey
        Survey.updateOne(
          {
            _id: surveyId,
            recipients: {
              $elemMatch: { email: email, responded: false }
            }
          },
          {
            // after the record is found, update the record by the response and set the responded value to true
            $inc: { [choice]: 1 }, // $inc is a mongo operator and stands for increment and the choice is decided at runtime when the user responds 'yes' or 'no'
            $set: { 'recipients.$.responded': true },
            lastResponded: new Date()
          }
        ).exec();
      })
      .value();

    res.send({});
  });

  app.post('/api/surveys', requireLogin, requireCredits, async (req, res) => {
    const { title, subject, body, recipients } = req.body;
    // title: title is same as just putting title in es6 syntax
    const survey = new Survey({
      title,
      subject,
      body,
      // take array of emails, split them and return an object for every email
      // with a property of email and the actual email address
      recipients: recipients.split(',').map(email => ({ email: email.trim() })),
      _user: req.user.id, // id generated by mongo for use on mongo models
      dateSent: Date.now()
    });

    //sending email with the survey and email template passed in as arguments
    //taking a credit for the sent email and then saving and updating the user
    try {
      const mailer = new Mailer(survey, surveyTemplate(survey));
      await mailer.send();
      await survey.save();
      req.user.credits -= 1;
      const user = await req.user.save();

      res.send(user);
    } catch (err) {
      res.status(422).send(err);
    }
  });
};
